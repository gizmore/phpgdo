<?php
declare(strict_types=1);
namespace GDO\Core;

use GDO\DB\Query;
use GDO\Table\GDT_Filter;
use GDO\UI\WithIcon;
use GDO\UI\WithLabel;

/**
 * A virtual field that is generated by a subquery.
 * Uses a proxy gdt to render.
 *
 * You need to provide subquery sql and gdt proxy
 *
 * @version 7.0.3
 * @since 6.10.0
 *
 * @author gizmore
 * @see GDT_Join
 */
class GDT_Virtual extends GDT
{

	use WithGDO;
	use WithIcon;
	use WithLabel;

	public string $subquery;

	/**
	 * Encapsulated virtual GDT Proxy
	 **/
	public GDT $gdtType;

	public function isTestable(): bool { return false; }

	public function isVirtual(): bool { return true; }

	#############
	### Query ###
	#############

	public function isSerializable(): bool { return true; }

	public function isOrderable(): bool { return true; }

	#############
	### Event ###
	#############

	/**
	 * Select this virtual column as subselect.
	 */
	public function gdoBeforeRead(GDO $gdo, Query $query): void
	{
		if (isset($this->subquery))
		{
			$query->select("({$this->subquery}) AS {$this->getName()}");
		}
	}

	#############
	### Proxy ###
	#############

	public function htmlClass(): string
	{
		return $this->proxy()->htmlClass();
	}

	/**
	 * Get and setup the proxy GDT
	 */
	private function proxy(): GDT
	{
		$gdt = isset($this->gdo) ? $this->gdtType->gdo($this->gdo) : $this->gdtType;
		if (isset($this->labelKey))
		{
			$gdt->label($this->labelKey, $this->labelArgs);
		}
		elseif (isset($this->labelRaw))
		{
			$gdt->label($this->labelRaw);
		}
		return $gdt;
	}


	##############
	### Render ###
	##############

	public function render(): array|string|null
	{
		return $this->proxy()->render();
	}

	public function renderHTML(): string { return $this->proxy()->renderHTML(); }

	public function renderJSON(): array|string|null|int|bool|float { return $this->proxy()->renderJSON(); }

	public function renderCard(): string { return $this->proxy()->renderCard(); }

	public function renderForm(): string { return $this->proxy()->renderForm(); }

	public function renderFilter(GDT_Filter $f): string { return $this->proxy()->renderFilter($f); }

	public function filterQuery(Query $query, GDT_Filter $f): static
	{
		$this->proxy()->filterQuery($query, $f);
		return $this;
	}

	public function subquery(string $subquery): self
	{
		$this->subquery = $subquery;
		return $this;
	}

	public function gdtType(GDT $gdt): self
	{
		$this->gdtType = $gdt;
		$this->gdtType->name($this->getName());
		return $this;
	}


}
